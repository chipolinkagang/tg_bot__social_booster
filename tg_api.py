import asyncio
import logging

from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher, FSMContext
import math

import config
import like_api
import like_snebes_3
import pay_yoomoney
import repost_likest4
import view_api
from aiogram.types.message import ContentType
from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions, InlineKeyboardButton, \
    InlineKeyboardMarkup

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware

import time

import db_funcs
from aiopg.sa import create_engine

import markups as nav
from aiogram.dispatcher.filters.state import StatesGroup, State

class Mail(StatesGroup):
    mail = State()

bot = Bot(token='5530817308:AAGVgvbqKPK2mryMkoGOcWSWndr4oOXkdrA')
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    uid = message.from_user.id  # –∑–∞–ø–∏—Å–∞–ª id
    uname = message.from_user.full_name  # –∏–º—è
    person = {"name": uname, "tg_id": str(uid)}
    async with create_engine(user=config.datab["user"],
                             database=config.datab["database"],
                             host=config.datab["host"],
                             password=config.datab["password"]) as engine:
        if not await db_funcs.reg_check(engine, person["tg_id"]):
            await db_funcs.registration(engine, person)
            await message.reply("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞!", reply_markup=nav.mainMenu)
        else:
            await message.reply("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ–Ω—é", reply_markup=nav.mainMenu)


# class Task_now:
#     task_id = 0  # 1 - –ª–∞–π–∫–∏, 2 - –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
#
#     def choose_task(self, _task: int):
#         self.task_id = _task
#
#     def check_task(self):
#         return self.task_id
#
#
# task = Task_now()

@dp.callback_query_handler(lambda c: c.data == 'make_pay_button')
async def process_callback_make_pay_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    async with create_engine(user=config.datab["user"],
                             database=config.datab["database"],
                             host=config.datab["host"],
                             password=config.datab["password"]) as engine:
        await db_funcs.set_now_task(engine, str(callback_query.from_user.id), "1000")
    await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å –∫–∞—Ä—Ç—ã:')


@dp.callback_query_handler(lambda c: c.data == 'check_pay_button')
async def process_callback_check_pay_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    async with create_engine(user=config.datab["user"],
                             database=config.datab["database"],
                             host=config.datab["host"],
                             password=config.datab["password"]) as engine:
        labels = await db_funcs.check_payment_labels(engine, str(callback_query.from_user.id))
        for label in labels:
            if await pay_yoomoney.check_payment(label):
                payment_info = await db_funcs.get_payment(engine, label)
                await db_funcs.delete_payment_label(engine, label)
                await db_funcs.add_balance(engine, payment_info["tg_id"], payment_info["sum"])
                await bot.send_message(callback_query.from_user.id,
                                       "–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ # " + label + ".\n–ó–∞—á–∏—Å–ª–µ–Ω–æ: " + str(
                                           payment_info["sum"]))
            else:
                await bot.send_message(callback_query.from_user.id, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ #" + label + " –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


@dp.message_handler(commands=['mail'], user_id=config.ADMIN_ID, state='*')
async def mail(message: types.Message):
    await message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:'
    )
    await Mail.mail.set()

@dp.message_handler(state=Mail.mail, content_types=types.ContentType.ANY)
async def mail_on(message: types.Message, state: FSMContext):
    async with create_engine(user=config.datab["user"],
                             database=config.datab["database"],
                             host=config.datab["host"],
                             password=config.datab["password"]) as engine:
        select_users = await db_funcs.get_all(engine)
    await state.reset_state(with_data=False)
    if types.ContentType.TEXT == message.content_type: # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç
        for user in select_users:
            try:
                await bot.send_message(
                    chat_id=int(user),
                    text=message.html_text
                )
                await asyncio.sleep(0.33)
            except Exception:
                pass
        else:
            await message.answer(
                '<b> –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>'
            )

    elif types.ContentType.PHOTO == message.content_type: # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ
        for user in select_users:
            try:
                await bot.send_photo(
                    chat_id=int(user),
                    photo=message.photo[-1].file_id,
                    caption=message.html_text if message.caption else None
                )
                await asyncio.sleep(0.33)
            except Exception:
                pass
        else:
            await message.answer(
                '<b> –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>'
            )

    elif types.ContentType.VIDEO == message.content_type: # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ
        for user in select_users:
            try:
                await bot.send_video(
                    chat_id=int(user),
                    video=message.video.file_id,
                    caption=message.html_text if message.caption else None
                )
                await asyncio.sleep(0.33)
            except Exception:
                pass
        else:
            await message.answer(
                '<b> –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>'
            )

    elif types.ContentType.ANIMATION == message.content_type: # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª gif
        for user in select_users:
            try:
                await bot.send_animation(
                    chat_id=int(user),
                    animation=message.animation.file_id,
                    caption=message.html_text if message.caption else None
                )
                await asyncio.sleep(0.33)
            except Exception:
                pass
        else:
            await message.answer(
                '<b> –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>'
            )

    else:
        await message.answer(
            '<b> –î–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!</b>'
        )



@dp.message_handler()
async def echo_message(msg: types.Message):
    async with create_engine(user=config.datab["user"],
                             database=config.datab["database"],
                             host=config.datab["host"],
                             password=config.datab["password"]) as engine:
        if msg.text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            # task.choose_task(0)
            await db_funcs.set_now_task(engine, str(msg.from_user.id), "0")
            await bot.send_message(msg.from_user.id, "–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=nav.mainMenu)

        # for main menu:
        elif msg.text == "üÜï –ó–ê–ö–ê–ó":
            # task.choose_task(0)
            await db_funcs.set_now_task(engine, str(msg.from_user.id), "0")
            await bot.send_message(msg.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è.", reply_markup=nav.orderMenu)
        elif msg.text == "‚ÑπÔ∏è –ü—Ä–æ—Ñ–∏–ª—å":
            # task.choose_task(0)
            await db_funcs.set_now_task(engine, str(msg.from_user.id), "0")
            uid = str(msg.from_user.id)
            balance = await db_funcs.get_balance(engine, str(msg.from_user.id))
            ans = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\nTelegram id: " + uid + "\n–ë–∞–ª–∞–Ω—Å: " + str(
                balance) + "\n–ù–∞ —Å—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–∏—Å–∞—Ç—å: @chipolinka_gang"
            await bot.send_message(msg.from_user.id, ans, reply_markup=nav.inline_kb_make_payment)
        elif msg.text == "#Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            uid = str(msg.from_user.id)
            get_like = await db_funcs.get_report(engine, uid, 1)
            get_snebes_like = await db_funcs.get_report(engine, uid, 3)
            get_view = await db_funcs.get_report(engine, uid, 2)
            # task.choose_task(0)
            await db_funcs.set_now_task(engine, str(msg.from_user.id), "0")
            await bot.send_message(msg.from_user.id,
                                   "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n–õ–∞–π–∫–∏ –æ–±—ã—á–Ω—ã–µ:\n–ó–∞–∫–∞–∑–æ–≤: " + str(
                                       get_like['res_orders']) + " —à—Ç—É–∫\n–í—Å–µ–≥–æ: " +
                                   str(get_like['res_sum']) + " –ª–∞–π–∫–æ–≤\n\n–õ–∞–π–∫–∏ –∂–∏–≤—ã–µ:\n–ó–∞–∫–∞–∑–æ–≤: " + str(
                                       get_snebes_like['res_orders']) + " —à—Ç—É–∫\n–í—Å–µ–≥–æ: " +
                                   str(get_snebes_like['res_sum']) + " –ª–∞–π–∫–æ–≤\n\n–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:\n–ó–∞–∫–∞–∑–æ–≤: " + str(
                                       get_view['res_orders']) + " —à—Ç—É–∫\n–í—Å–µ–≥–æ: " +
                                   str(get_view['res_sum']) + " –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
        # for order menu:
        elif msg.text == "üîù –õ–∞–π–∫–∏":
            await bot.send_message(msg.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–∞–π–∫–æ–≤.", reply_markup=nav.likeMenu)
        elif msg.text == "‚ù§Ô∏è–û–±—ã—á–Ω—ã–µ –ª–∞–π–∫–∏":
            # task.choose_task(1)
            await db_funcs.set_now_task(engine, str(msg.from_user.id), "1")
            default_price_like_1 = 60
            if await db_funcs.get_personal_price(engine, str(msg.from_user.id), "1") is not None:
                await bot.send_message(msg.from_user.id,
                                       "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–¶–µ–Ω–∞ " + await db_funcs.get_personal_price(
                                           engine, str(msg.from_user.id),
                                           "1") + " —Ä—É–±–ª–µ–π –∑–∞ 1000 –ª–∞–π–∫–æ–≤\n–ü—Ä–∏–º–µ—Ä:\nhttps://vk.com/wall-22822305_1307837 110",
                                       reply_markup=nav.likeMenu)
            else:
                await bot.send_message(msg.from_user.id,
                                       "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–¶–µ–Ω–∞ " + str(
                                           default_price_like_1) + " —Ä—É–±–ª–µ–π –∑–∞ 1000 –ª–∞–π–∫–æ–≤\n–ü—Ä–∏–º–µ—Ä:\nhttps://vk.com/wall-22822305_1307837 110",
                                       reply_markup=nav.likeMenu)
        elif msg.text == "üë§–ñ–∏–≤—ã–µ –ª–∞–π–∫–∏":
            # task.choose_task(1)
            await db_funcs.set_now_task(engine, str(msg.from_user.id), "3")
            default_price_like_1 = 90
            if await db_funcs.get_personal_price(engine, str(msg.from_user.id), "3") is not None:
                await bot.send_message(msg.from_user.id,
                                       "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–¶–µ–Ω–∞ " + await db_funcs.get_personal_price(
                                           engine, str(msg.from_user.id),
                                           "3") + " —Ä—É–±–ª–µ–π –∑–∞ 1000 –ª–∞–π–∫–æ–≤\n–ü—Ä–∏–º–µ—Ä:\nhttps://vk.com/wall-22822305_1307837 110",
                                       reply_markup=nav.likeMenu)
            else:
                await bot.send_message(msg.from_user.id,
                                       "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–¶–µ–Ω–∞ " + str(
                                           default_price_like_1) + " —Ä—É–±–ª–µ–π –∑–∞ 1000 –ª–∞–π–∫–æ–≤\n–ü—Ä–∏–º–µ—Ä:\nhttps://vk.com/wall-22822305_1307837 110",
                                       reply_markup=nav.likeMenu)
        elif msg.text == "üëÅ‚Äçüó® –ü—Ä–æ—Å–º–æ—Ç—Ä—ã":

            # task.choose_task(2)
            await db_funcs.set_now_task(engine, str(msg.from_user.id), "2")
            default_price_view_2 = 10
            if await db_funcs.get_personal_price(engine, str(msg.from_user.id), "2") is not None:
                await bot.send_message(msg.from_user.id,
                                       "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–¶–µ–Ω–∞ " + await db_funcs.get_personal_price(
                                           engine, str(msg.from_user.id),
                                           "2") + " —Ä—É–±–ª–µ–π –∑–∞ 1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n–ü—Ä–∏–º–µ—Ä:\nhttps://vk.com/wall-22822305_1307837 3200",
                                       reply_markup=nav.orderMenu)
            else:
                await bot.send_message(msg.from_user.id,
                                       "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–¶–µ–Ω–∞ " + str(
                                           default_price_view_2) + " —Ä—É–±–ª–µ–π –∑–∞ 1000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n–ü—Ä–∏–º–µ—Ä:\nhttps://vk.com/wall-22822305_1307837 3200",
                                       reply_markup=nav.orderMenu)
        elif msg.text == "üì¢–†–µ–ø–æ—Å—Ç—ã":

            # task.choose_task(2)
            await db_funcs.set_now_task(engine, str(msg.from_user.id), "4")
            default_price_repost = 120
            if await db_funcs.get_personal_price(engine, str(msg.from_user.id), "4") is not None:
                await bot.send_message(msg.from_user.id,
                                       "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–¶–µ–Ω–∞ " + str(
                                           int(await db_funcs.get_personal_price(engine, str(msg.from_user.id),
                                                                                 "4")) / 10) + " —Ä—É–±–ª–µ–π –∑–∞ 100 —Ä–µ–ø–æ—Å—Ç–æ–≤\n–ü—Ä–∏–º–µ—Ä:\nhttps://vk.com/wall-22822305_1307837 32",
                                       reply_markup=nav.orderMenu)
            else:
                await bot.send_message(msg.from_user.id,
                                       "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–¶–µ–Ω–∞ " + str(
                                           default_price_repost / 10) + " —Ä—É–±–ª–µ–π –∑–∞ 100 —Ä–µ–ø–æ—Å—Ç–æ–≤\n–ü—Ä–∏–º–µ—Ä:\nhttps://vk.com/wall-22822305_1307837 32",
                                       reply_markup=nav.orderMenu)
        elif msg.text[0:10] == "addbalance" and msg.from_user.id==config.ADMIN_ID:
            add_balance = msg.text.split()
            await db_funcs.add_balance(engine, add_balance[1], int(add_balance[2]))
            await bot.send_message(msg.from_user.id,
                                   "–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: " + add_balance[1] + " tg_id, –Ω–∞ " + add_balance[2] + " —Ä—É–±–ª–µ–π")
        elif msg.text[0:8] == "setprice" and msg.from_user.id==config.ADMIN_ID:
            set_price = msg.text.split()
            await db_funcs.set_personal_price(engine, set_price[1], set_price[2], set_price[3])
            await bot.send_message(msg.from_user.id,
                                   "Price –æ–±–Ω–æ–≤–ª–µ–Ω:\n" + "tg_id: " + set_price[1] + ", type: " + set_price[
                                       2] + ", —Ü–µ–Ω–∞: " + set_price[3] + " —Ä—É–±–ª–µ–π")
        elif msg.text[0:5] == "https":
            order_list = msg.text.split()
            if len(order_list) == 2 and int(order_list[1]) > 0:
                uid = str(msg.from_user.id)
                # if task.check_task() == 1:
                if await db_funcs.get_now_task(engine, str(msg.from_user.id)) == "1":
                    order_price = 60
                    t = await db_funcs.get_personal_price(engine, str(msg.from_user.id), "1")
                    if t is not None:
                        order_price = t
                    try:
                        sum = math.ceil(int(order_list[1]) / 1000 * int(order_price))
                        if (await db_funcs.get_balance(engine, str(msg.from_user.id)) - sum) > 0:
                            await like_api.make_like(str(uid), order_list[0], str(order_list[1]))
                            await bot.send_message(msg.from_user.id, "–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
                            await db_funcs.new_order(engine, {"tg_id": uid, "type_id": "1", "url": order_list[0],
                                                              "value": order_list[1], "sum": sum})
                            await db_funcs.add_balance(engine, uid, -sum)
                        else:
                            await bot.send_message(msg.from_user.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
                    except Exception as ex:
                        await bot.send_message(msg.from_user.id, "–û—à–∏–±–∫–∞:" + str(ex))
                # if task.check_task() == 3:
                if await db_funcs.get_now_task(engine, str(msg.from_user.id)) == "3":
                    order_price = 90
                    t = await db_funcs.get_personal_price(engine, str(msg.from_user.id), "3")
                    if t is not None:
                        order_price = t
                    try:
                        sum = math.ceil(int(order_list[1]) / 1000 * int(order_price))
                        if (await db_funcs.get_balance(engine, str(msg.from_user.id)) - sum) > 0:
                            await like_snebes_3.make_like(order_list[0], str(order_list[1]))
                            await bot.send_message(msg.from_user.id, "–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
                            await db_funcs.new_order(engine,
                                                     {"tg_id": uid, "type_id": "1", "url": order_list[0],
                                                      "value": order_list[1], "sum": sum})
                            await db_funcs.add_balance(engine, uid, -sum)
                        else:
                            await bot.send_message(msg.from_user.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
                    except Exception as ex:
                        await bot.send_message(msg.from_user.id, "–û—à–∏–±–∫–∞:" + str(ex))

                # if task.check_task() == 4:
                if await db_funcs.get_now_task(engine, str(msg.from_user.id)) == "4":
                    order_price = 120
                    t = await db_funcs.get_personal_price(engine, str(msg.from_user.id), "4")
                    if t is not None:
                        order_price = t
                    try:
                        sum = math.ceil(int(order_list[1]) / 1000 * int(order_price))
                        if (await db_funcs.get_balance(engine, str(msg.from_user.id)) - sum) > 0:
                            await repost_likest4.make_repost(order_list[0], str(order_list[1]))
                            await bot.send_message(msg.from_user.id, "–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
                            await db_funcs.new_order(engine,
                                                     {"tg_id": uid, "type_id": "1", "url": order_list[0],
                                                      "value": order_list[1], "sum": sum})
                            await db_funcs.add_balance(engine, uid, -sum)
                        else:
                            await bot.send_message(msg.from_user.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
                    except Exception as ex:
                        await bot.send_message(msg.from_user.id, "–û—à–∏–±–∫–∞:" + str(ex))

                # if task.check_task() == 2:
                if await db_funcs.get_now_task(engine, str(msg.from_user.id)) == "2":
                    order_price = 10
                    t = await db_funcs.get_personal_price(engine, str(msg.from_user.id), "2")
                    if t is not None:
                        order_price = t
                    try:
                        sum = math.ceil(int(order_list[1]) / 1000 * int(order_price))
                        if (await db_funcs.get_balance(engine, str(msg.from_user.id)) - sum) > 0:
                            await view_api.make_view(order_list[0], str(order_list[1]))
                            await bot.send_message(msg.from_user.id, "–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
                            await db_funcs.new_order(engine, {"tg_id": uid, "type_id": "2", "url": order_list[0],
                                                              "value": order_list[1], "sum": sum})
                            await db_funcs.add_balance(engine, uid, -sum)
                        else:
                            await bot.send_message(msg.from_user.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
                    except Exception as ex:
                        await bot.send_message(msg.from_user.id, "–û—à–∏–±–∫–∞:" + str(ex))
                # if task.check_task() == 0:
                if await db_funcs.get_now_task(engine, str(msg.from_user.id)) == "0":
                    await bot.send_message(msg.from_user.id, "–ù–µ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø –Ω–∞–∫—Ä—É—Ç–∫–∏.")
            else:
                await bot.send_message(msg.from_user.id,
                                       "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.\n–ü—Ä–∏–º–µ—Ä –≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\nhttps://vk.com/wall-22822305_1307837 3200\n(—Å—Å—ã–ª–∫–∞_–Ω–∞_–ø–æ—Å—Ç, 1 –ø—Ä–æ–±–µ–ª, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)")
        elif (msg.text.isdigit()) and (await db_funcs.get_now_task(engine, str(msg.from_user.id)) == "1000"):
            if int(msg.text) > 1:
                payment_url_label = await pay_yoomoney.create_payment(str(msg.from_user.id), int(msg.text))
                inline_kb__check_payment = InlineKeyboardMarkup()
                inline_kb__check_payment.row(InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å', url=payment_url_label["url"]))
                inline_kb__check_payment.row(InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='check_pay_button'))
                await bot.send_message(msg.from_user.id,
                                       "–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∞. \n–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.",
                                       reply_markup=inline_kb__check_payment)
                await db_funcs.create_new_payment(engine, str(msg.from_user.id), int(msg.text),
                                                  payment_url_label["label"])
            else:
                await bot.send_message(msg.from_user.id, "–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 2 —Ä—É–±–ª–µ–π.")
        else:
            await bot.send_message(msg.from_user.id, "–ß—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–æ—Å—å –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")


if __name__ == '__main__':
    executor.start_polling(dp)
